#!/bin/bash
#
# lib/neutron
# Install and start **Neutron** network services

# Dependencies:
#
# ``functions`` file
# ``DEST`` must be defined

# ``stack.sh`` calls the entry points in this order:
#
# - is_XXXX_enabled
# - install_XXXX
# - configure_XXXX
# - init_XXXX
# - start_XXXX
# - stop_XXXX
# - cleanup_XXXX

# Save trace setting
XTRACE=$(set +o | grep xtrace)
set +o xtrace




# Functions
# ---------

function clone_neutron {
    local force=$1
    clone_repo $NEUTRON_REPO $NEUTRON_SRC_DIR force   
}

function install_neutron {
    
    clone_neutron $FORCE_CLONE_REPO
    cd $NEUTRON_SRC_DIR
    pip install -r $NEUTRON_SRC_DIR/requirements.txt
    python setup.py install --prefix=$DEST_BASE
    cd -
    
    # L3 service requires radvd
    if is_service_enabled neutron-l3; then
        install_package radvd
    fi
    
    if [[ $NEUTRON_AGENT == "openvswitch" ]]; then
        install_ovs
        configure_ovs
    fi
    
}



# Test if any Neutron services are enabled
# is_neutron_enabled
function is_neutron_enabled {
    [[ ,${DISABLED_SERVICES} =~ ,"neutron" ]] && return 1
    [[ ,${ENABLED_SERVICES} =~ ,"neutron-" || ,${ENABLED_SERVICES} =~ ,"q-" ]] && return 0
    return 1
}

# Test if any Neutron services are enabled
# is_neutron_enabled
function is_neutron_legacy_enabled {
    [[ ,${DISABLED_SERVICES} =~ ,"neutron" ]] && return 1
    [[ ,${ENABLED_SERVICES} =~ ,"q-" ]] && return 0
    return 1
}

if is_neutron_legacy_enabled; then
    source $TOP_DIR/lib/neutron-legacy
fi

# cleanup_neutron() - Remove residual data files, anything left over from previous
# runs that a clean run would need to clean up
function cleanup_neutron_new {
    source $TOP_DIR/lib/neutron_plugins/${NEUTRON_AGENT}_agent
    if is_neutron_ovs_base_plugin; then
        neutron_ovs_base_cleanup
    fi

    if [[ $NEUTRON_AGENT == "linuxbridge" ]]; then
        neutron_lb_cleanup
    fi
    # delete all namespaces created by neutron
    for ns in $(sudo ip netns list | grep -o -E '(qdhcp|qrouter|qlbaas|fip|snat)-[0-9a-f-]*'); do
        sudo ip netns delete ${ns}
    done
}

# configure_root_helper_options() - Configure agent rootwrap helper options
function configure_root_helper_options {
    local conffile=$1
    iniset $conffile agent root_helper "sudo $NEUTRON_ROOTWRAP_CMD"
    iniset $conffile agent root_helper_daemon "sudo $NEUTRON_ROOTWRAP_DAEMON_CMD"
}

# configure_neutron() - Set config files, create data dirs, etc
function configure_neutron_new {
    sudo install -d -o neutron $NEUTRON_CONF_DIR
    sudo install -d -o neutron -g neutron -m 755 $NEUTRON_CONF_DIR/conf.d
    sudo install -d -o neutron -g neutron -m 755 $NEUTRON_CONF_DIR/conf.d/common
    sudo install -d -o neutron -g neutron -m 755 $NEUTRON_CONF_DIR/conf.d/server
    sudo install -d -o neutron -g neutron -m 755 $NEUTRON_CONF_DIR/conf.d/neutron-server
    sudo install -d -o neutron -g neutron -m 755 $DEST_BASE/data/neutron
    sudo install -d -o neutron -g neutron -m 755 /var/log/neutron 
    sudo cp $NEUTRON_SRC_DIR/tools/neutron-enable-bridge-firewall.sh $BIN_DIR
    sudo chmod a+x $BIN_DIR/neutron-enable-bridge-firewall.sh
    
    #sudo install -d -o neutron -g neutron -m 755 /var/log/neutron (not work) ??
   # if [[ ! -d "/var/log/neutron" ]]; then
   #     sudo mkdir /var/log/neutron
   #     sudo chown -R neutron:neutron /var/log/neutron
   # fi

    cd $NEUTRON_SRC_DIR && sudo sh tools/generate_config_file_samples.sh

    #cp $NEUTRON_SRC_DIR/etc/neutron.conf.sample $NEUTRON_CONF

    configure_neutron_rootwrap

    mkdir -p $NEUTRON_CORE_PLUGIN_CONF_PATH

    # NOTE(yamamoto): A decomposed plugin should prepare the config file in
    # its devstack plugin.
    if [ -f $NEUTRON_SRC_DIR/etc/neutron/plugins/$NEUTRON_CORE_PLUGIN/$NEUTRON_CORE_PLUGIN_CONF_FILENAME.sample ]; then
        cp $NEUTRON_SRC_DIR/etc/neutron/plugins/$NEUTRON_CORE_PLUGIN/$NEUTRON_CORE_PLUGIN_CONF_FILENAME.sample $NEUTRON_CORE_PLUGIN_CONF
    fi

    iniset $NEUTRON_CONF database connection "mysql+pymysql://neutron:$DATABASE_PASSWORD@controller/neutron"
    iniset $NEUTRON_CONF DEFAULT state_path $NEUTRON_STATE_PATH
    iniset $NEUTRON_CONF oslo_concurrency lock_path $NEUTRON_STATE_PATH/lock
    iniset $NEUTRON_CONF DEFAULT transport_url rabbit://openstack:$RABBIT_PASSWORD@controller
    iniset $NEUTRON_CONF DEFAULT rpc_backend rabbit

    iniset $NEUTRON_CONF DEFAULT debug $ENABLE_DEBUG_LOG_LEVEL

    iniset_rpc_backend neutron $NEUTRON_CONF

    # Neutron API server & Neutron plugin
    if is_service_enabled neutron-server; then
        local policy_file=$NEUTRON_CONF_DIR/policy.json
        cp $NEUTRON_SRC_DIR/etc/policy.json $policy_file
        # Allow neutron user to administer neutron to match neutron account
        sed -i 's/"context_is_admin":  "role:admin"/"context_is_admin":  "role:admin or user_name:neutron"/g' $policy_file

        cp $NEUTRON_SRC_DIR/etc/api-paste.ini $NEUTRON_CONF_DIR/api-paste.ini

        iniset $NEUTRON_CONF DEFAULT core_plugin $NEUTRON_CORE_PLUGIN

        iniset $NEUTRON_CONF DEFAULT policy_file $policy_file
        iniset $NEUTRON_CONF DEFAULT allow_overlapping_ips True

        iniset $NEUTRON_CONF DEFAULT auth_strategy $NEUTRON_AUTH_STRATEGY
        
#        iniset $NEUTRON_CONF keystone_authtoken auth_uri http://$CONTROLLER_IP:$KEYSTONE_SERVICE_PORT
        iniset $NEUTRON_CONF keystone_authtoken auth_url http://$CONTROLLER_IP:$KEYSTONE_AUTH_PORT
        iniset $NEUTRON_CONF keystone_authtoken memcached_servers $CONTROLLER_IP:11211
        iniset $NEUTRON_CONF keystone_authtoken auth_type password
        iniset $NEUTRON_CONF keystone_authtoken project_domain_name $SERVICE_DOMAIN_NAME
        iniset $NEUTRON_CONF keystone_authtoken user_domain_name $SERVICE_DOMAIN_NAME
        iniset $NEUTRON_CONF keystone_authtoken project_name $SERVICE_PROJECT_NAME
        iniset $NEUTRON_CONF keystone_authtoken username neutron
        iniset $NEUTRON_CONF keystone_authtoken password $SERVICE_PASSWORD
        
        iniset $NEUTRON_CONF nova auth_url http://$CONTROLLER_IP:$KEYSTONE_AUTH_PORT
        iniset $NEUTRON_CONF nova auth_type password
        iniset $NEUTRON_CONF nova project_domain_name $SERVICE_DOMAIN_NAME
        iniset $NEUTRON_CONF nova user_domain_name $SERVICE_DOMAIN_NAME
        iniset $NEUTRON_CONF nova region_name $REGION_NAME
        iniset $NEUTRON_CONF nova project_name $SERVICE_PROJECT_NAME
        iniset $NEUTRON_CONF nova username nova
        iniset $NEUTRON_CONF nova password $SERVICE_PASSWORD


        # Configure VXLAN
        # TODO(sc68cal) not hardcode?
        iniset $NEUTRON_CORE_PLUGIN_CONF ml2 tenant_network_types vxlan
        iniset $NEUTRON_CORE_PLUGIN_CONF ml2 mechanism_drivers openvswitch,linuxbridge
        iniset $NEUTRON_CORE_PLUGIN_CONF ml2_type_vxlan vni_ranges 1001:2000
        iniset $NEUTRON_CORE_PLUGIN_CONF ml2_type_flat flat_networks public
        if [[ "$NEUTRON_PORT_SECURITY" = "True" ]]; then
            neutron_ml2_extension_driver_add port_security
        fi
        
        if is_service_enabled openvswitch; then
            iniset $NEUTRON_CONF_DIR/plugins/openvswitch/ovs_neutron_plugin.ini database connection "mysql+pymysql://neutron:$DATABASE_PASSWORD@controller/neutron"
        fi
    fi

    # Neutron OVS or LB agent
    if is_service_enabled neutron-agent; then
        sudo install -d -o neutron -g neutron -m 755 $NEUTRON_CONF_DIR/conf.d/neutron-$NEUTRON_AGENT-agent
        iniset $NEUTRON_CORE_PLUGIN_CONF agent tunnel_types vxlan
        iniset $NEUTRON_CORE_PLUGIN_CONF DEFAULT debug $ENABLE_DEBUG_LOG_LEVEL
        configure_root_helper_options $NEUTRON_CORE_PLUGIN_CONF

        # Configure the neutron agent
        if [[ $NEUTRON_AGENT == "linuxbridge" ]]; then
            iniset $NEUTRON_CORE_PLUGIN_CONF securitygroup firewall_driver iptables
            iniset $NEUTRON_CORE_PLUGIN_CONF vxlan local_ip $HOST_IP
        else
            iniset $NEUTRON_CORE_PLUGIN_CONF securitygroup firewall_driver iptables_hybrid
            iniset $NEUTRON_CORE_PLUGIN_CONF ovs local_ip $HOST_IP
        fi

        if ! running_in_container; then
            enable_kernel_bridge_firewall
        fi
    fi

    # DHCP Agent
    if is_service_enabled neutron-dhcp-agent; then
        sudo install -d -o neutron -g neutron -m 755 $NEUTRON_CONF_DIR/conf.d/neutron-dhcp-agent
        cp -f $NEUTRON_SRC_DIR/etc/dhcp_agent.ini.sample $NEUTRON_DHCP_CONF

        iniset $NEUTRON_DHCP_CONF DEFAULT debug $ENABLE_DEBUG_LOG_LEVEL
        # make it so we have working DNS from guests
        iniset $NEUTRON_DHCP_CONF DEFAULT dnsmasq_local_resolv True

        configure_root_helper_options $NEUTRON_DHCP_CONF
        iniset $NEUTRON_DHCP_CONF DEFAULT interface_driver $NEUTRON_AGENT
        neutron_plugin_configure_dhcp_agentneutron_plugin_configure_dhcp_agent $NEUTRON_DHCP_CONF
    fi

    if is_service_enabled neutron-l3; then
        sudo install -d -o neutron -g neutron -m 755 $NEUTRON_CONF_DIR/conf.d/neutron-l3-agent
        
        cp $NEUTRON_SRC_DIR/etc/l3_agent.ini.sample $NEUTRON_L3_CONF
        iniset $NEUTRON_L3_CONF DEFAULT interface_driver $NEUTRON_AGENT
        neutron_service_plugin_class_add router
        configure_root_helper_options $NEUTRON_L3_CONF
        iniset $NEUTRON_L3_CONF DEFAULT debug $ENABLE_DEBUG_LOG_LEVEL


        # Configure the neutron agent to serve external network ports
        if [[ $NEUTRON_AGENT == "linuxbridge" ]]; then
            iniset $NEUTRON_CORE_PLUGIN_CONF linux_bridge bridge_mappings "$PUBLIC_NETWORK_NAME:$PUBLIC_BRIDGE"
            iniset $NEUTRON_CORE_PLUGIN_CONF linux_bridge physical_interface_mappings "$PUBLIC_NETWORK_NAME:$PUBLIC_INTERFACE"
        else
            iniset $NEUTRON_CORE_PLUGIN_CONF ovs bridge_mappings "$PUBLIC_NETWORK_NAME:$PUBLIC_BRIDGE"
            iniset $NEUTRON_CORE_PLUGIN_CONF ovs physical_interface_mappings "$PUBLIC_NETWORK_NAME:$PUBLIC_INTERFACE"
        fi
    fi

    # Metadata
    if is_service_enabled neutron-metadata-agent; then
        sudo install -d -o neutron -g neutron -m 755 $NEUTRON_CONF_DIR/conf.d/neutron-metadata-agent
        cp $NEUTRON_SRC_DIR/etc/metadata_agent.ini.sample $NEUTRON_META_CONF

        iniset $NEUTRON_META_CONF DEFAULT debug $ENABLE_DEBUG_LOG_LEVEL
        iniset $NEUTRON_META_CONF DEFAULT nova_metadata_host $SERVICE_HOST
        iniset $NEUTRON_META_CONF DEFAULT metadata_workers $API_WORKERS
        # TODO(ihrachys) do we really need to set rootwrap for metadata agent?
        configure_root_helper_options $NEUTRON_META_CONF

        # TODO(dtroyer): remove the v2.0 hard code below
        iniset $NEUTRON_META_CONF DEFAULT auth_url $KEYSTONE_SERVICE_URI

    fi

    if is_service_enabled tls-proxy; then
        # Set the service port for a proxy to take the original
        iniset $NEUTRON_CONF DEFAULT bind_port "$NEUTRON_SERVICE_PORT_INT"
        iniset $NEUTRON_CONF oslo_middleware enable_proxy_headers_parsing True
    fi

    # Metering
    if is_service_enabled neutron-metering; then
        cp $NEUTRON_SRC_DIR/etc/metering_agent.ini.sample $NEUTRON_METERING_AGENT_CONF
        neutron_service_plugin_class_add metering
    fi
    
    if is_service_enabled nova-compute; then
        iniset $NOVA_CPU_CONF neutron url http://controller:9696
        iniset $NOVA_CPU_CONF neutron auth_url http://controller:35357
        iniset $NOVA_CPU_CONF neutron auth_type password
        iniset $NOVA_CPU_CONF neutron project_domain_name default
        iniset $NOVA_CPU_CONF neutron user_domain_name default
        iniset $NOVA_CPU_CONF neutron region_name RegionOne
        iniset $NOVA_CPU_CONF neutron project_name service
        iniset $NOVA_CPU_CONF neutron username neutron
        iniset $NOVA_CPU_CONF neutron password 123456
    fi
}

function init_neutron_new {

    configure_neutron_db
    
    su -s /bin/sh -c "$BIN_DIR/neutron-db-manage --config-file $NEUTRON_CONF upgrade head" neutron

    create_neutron_cache_dir
}





# configure_neutron_rootwrap() - configure Neutron's rootwrap
function configure_neutron_rootwrap {
    # Deploy new rootwrap filters files (owned by root).
    # Wipe any existing rootwrap.d files first
    if [[ -d $NEUTRON_CONF_DIR/rootwrap.d ]]; then
        sudo rm -rf $NEUTRON_CONF_DIR/rootwrap.d
    fi

    # Deploy filters to /etc/neutron/rootwrap.d
    sudo install -d -o root -g root -m 755 $NEUTRON_CONF_DIR/rootwrap.d
    sudo install -o root -g root -m 644 $NEUTRON_SRC_DIR/etc/neutron/rootwrap.d/*.filters $NEUTRON_CONF_DIR/rootwrap.d

    # Set up ``rootwrap.conf``, pointing to ``$NEUTRON_CONF_DIR/rootwrap.d``
    sudo install -o root -g root -m 644 $NEUTRON_SRC_DIR/etc/rootwrap.conf $NEUTRON_CONF_DIR
    sudo sed -e "s:^filters_path=.*$:filters_path=$NEUTRON_CONF_DIR/rootwrap.d:" -i $NEUTRON_CONF_DIR/rootwrap.conf

    add_neutron_sudoer
}

# Make Neutron-required changes to nova.conf
function configure_neutron_nova_new {
    iniset $NOVA_CONF DEFAULT use_neutron True
    iniset $NOVA_CONF neutron auth_type "password"
    iniset $NOVA_CONF neutron auth_url "$KEYSTONE_SERVICE_URI"
    iniset $NOVA_CONF neutron username neutron
    iniset $NOVA_CONF neutron password "$SERVICE_PASSWORD"
    iniset $NOVA_CONF neutron user_domain_name "Default"
    iniset $NOVA_CONF neutron project_name "$SERVICE_PROJECT_NAME"
    iniset $NOVA_CONF neutron project_domain_name "Default"
    iniset $NOVA_CONF neutron auth_strategy $NEUTRON_AUTH_STRATEGY
    iniset $NOVA_CONF neutron region_name "$REGION_NAME"
    iniset $NOVA_CONF neutron service_metadata_proxy True
    iniset $NOVA_CONF neutron metadata_proxy_shared_secret "123456"
    iniset $NOVA_CONF neutron url "$SERVICE_PROTOCOL://$CONTROLLER_IP:$NEUTRON_SERVICE_PORT"

    iniset $NOVA_CONF DEFAULT firewall_driver nova.virt.firewall.NoopFirewallDriver


    if is_service_enabled neutron-metadata-agent; then
        iniset $NOVA_CONF neutron service_metadata_proxy "True"
    fi

}

# Tenant               User       Roles
# ------------------------------------------------------------------
# service              neutron    admin        # if enabled

# create_neutron_accounts() - Create required service accounts
function create_neutron_accounts_new {
    if [[ "$ENABLED_SERVICES" =~ "neutron-server" ]]; then

        create_service_user "neutron"

        neutron_service=$(get_or_create_service "neutron" \
            "network" "Neutron Service")
        get_or_create_endpoint $neutron_service \
            "$REGION_NAME" \
            "$NEUTRON_SERVICE_PROTOCOL://$NEUTRON_SERVICE_HOST:$NEUTRON_SERVICE_PORT/"
    fi
}

# create_neutron_cache_dir() - Part of the init_neutron() process
function create_neutron_cache_dir {
    # Create cache dir
    sudo install -d -o neutron $NEUTRON_AUTH_CACHE_DIR
    rm -f $NEUTRON_AUTH_CACHE_DIR/*
}


# start_neutron() - Start running processes
function start_neutron_new {

    if is_service_enabled neutron-server; then
        add_neutron_server_systemctl
        $SYSTEMCTL enable neutron-server.service
        $SYSTEMCTL restart neutron-server.service
    fi
    
    if is_service_enabled neutron-agent; then
        add-neutron-$NEUTRON_AGENT-agent-systemctl
        $SYSTEMCTL enable neutron-$NEUTRON_AGENT-agent.service
        $SYSTEMCTL restart neutron-$NEUTRON_AGENT-agent.service
    fi
    
    if is_service_enabled neutron-dhcp-agent; then
        add-neutron-dhcp-agent-systemctl
        $SYSTEMCTL enable neutron-dhcp-agent.service
        $SYSTEMCTL restart neutron-dhcp-agent.service
    fi
    
    if is_service_enabled neutron-l3; then
        add-neutron-l3-agent-systemctl
        $SYSTEMCTL enable neutron-l3-agent.service
        $SYSTEMCTL restart neutron-l3-agent.service
    fi
    
    if is_service_enabled neutron-metadata-agent; then
        add-neutron-metadata-agent-systemctl
        $SYSTEMCTL enable neutron-metadata-agent.service
        $SYSTEMCTL restart neutron-metadata-agent.service
    fi 
    
    if is_service_enabled neutron-server && [[ "$NEUTRON_CREATE_INITIAL_NETWORKS" == "True" ]]; then
        # XXX(sc68cal) - Here's where plugins can wire up their own networks instead
        # of the code in lib/neutron_plugins/services/l3
        if type -p neutron_plugin_create_initial_networks > /dev/null; then
            neutron_plugin_create_initial_networks
        else
            # XXX(sc68cal) Load up the built in Neutron networking code and build a topology
            source $TOP_DIR/lib/neutron_plugins/services/l3
            # Create the networks using servic (TODO...)
           # create_neutron_initial_network
        fi
    fi

    if is_service_enabled neutron-metering; then
        run_process neutron-metering "$NEUTRON_BIN_DIR/$NEUTRON_METERING_BINARY --config-file $NEUTRON_CONF --config-file $NEUTRON_METERING_AGENT_CONF"
    fi
}

# stop_neutron() - Stop running processes
function stop_neutron_new {
    for serv in neutron-api neutron-agent neutron-l3; do
        stop_process $serv
    done

    if is_service_enabled neutron-dhcp-agent; then
        stop_process neutron-dhcp
        pid=$(ps aux | awk '/[d]nsmasq.+interface=(tap|ns-)/ { print $2 }')
        [ ! -z "$pid" ] && sudo kill -9 $pid
    fi

    if is_service_enabled neutron-metadata-agent; then
        sudo pkill -9 -f neutron-ns-metadata-proxy || :
        stop_process neutron-metadata-agent
    fi
}

# neutron_service_plugin_class_add() - add service plugin class
function neutron_service_plugin_class_add {
    local service_plugin_class=$1
    local plugins=""

    plugins=$(iniget $NEUTRON_CONF DEFAULT service_plugins)
    if [ $plugins ]; then
        if [[ $plugins =~ "${service_plugin_class}" ]]; then
            return
        fi
    
        plugins+=","
    fi
    plugins+="${service_plugin_class}"
    iniset $NEUTRON_CONF DEFAULT service_plugins $plugins
}

function _neutron_ml2_extension_driver_add {
    local driver=$1
    local drivers=""

    drivers=$(iniget $NEUTRON_CORE_PLUGIN_CONF ml2 extension_drivers)
    if [ $drivers ]; then
        drivers+=","
    fi
    drivers+="${driver}"
    iniset $NEUTRON_CORE_PLUGIN_CONF ml2 extension_drivers $drivers
}

function neutron_server_config_add_new {
    _NEUTRON_SERVER_EXTRA_CONF_FILES_ABS+=($1)
}

# neutron_deploy_rootwrap_filters() - deploy rootwrap filters
function neutron_deploy_rootwrap_filters_new {
    local srcdir=$1
    sudo install -d -o root -g root -m 755 $NEUTRON_CONF_DIR/rootwrap.d
    sudo install -o root -g root -m 644 $srcdir/etc/neutron/rootwrap.d/*.filters $NEUTRON_CONF_DIR/rootwrap.d
}

# Dispatch functions
# These are needed for compatibility between the old and new implementations
# where there are function name overlaps.  These will be removed when
# neutron-legacy is removed.
# TODO(sc68cal) Remove when neutron-legacy is no more.
function cleanup_neutron {
    if is_neutron_legacy_enabled; then
        # Call back to old function
        cleanup_mutnauq "$@"
    else
        cleanup_neutron_new "$@"
    fi
}


function neutron_ml2_extension_driver_add {
    if is_neutron_legacy_enabled; then
        # Call back to old function
        _neutron_ml2_extension_driver_add_old "$@"
    else
        _neutron_ml2_extension_driver_add "$@"
    fi
}


function neutron_server_config_add {
    if is_neutron_legacy_enabled; then
        # Call back to old function
        mutnauq_server_config_add "$@"
    else
        neutron_server_config_add_new "$@"
    fi
}

function start_neutron {
    if is_neutron_legacy_enabled; then
        # Call back to old function
        start_mutnauq_l2_agent "$@"
        start_mutnauq_other_agents "$@"
    else
        start_neutron_new "$@"
    fi
}

function stop_neutron {
    if is_neutron_legacy_enabled; then
        # Call back to old function
        stop_mutnauq "$@"
    else
        stop_neutron_new "$@"
    fi
}

function neutron_deploy_rootwrap_filters {
    if is_neutron_legacy_enabled; then
        # Call back to old function
        _neutron_deploy_rootwrap_filters "$@"
    else
        neutron_deploy_rootwrap_filters_new "$@"
    fi
}

# Restore xtrace
$XTRACE
